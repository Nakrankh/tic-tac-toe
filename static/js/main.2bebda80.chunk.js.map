{"version":3,"sources":["components/Field.js","components/Board.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Field","x","y","board","currentPlayer","players","setPOT","checkWon","isWon","setIsDraw","newGame","useState","field","setField","playerMark","1","2","onClick","flat","every","className","Board","map","row","i","rowField","j","Fragment","length","Game","boardTemplate","Array","fill","playerOnTurn","setPlayerOnTurn","setIsWon","isDraw","setNewGame","checks","diag1","diag2","push","temp","includes","flatBoard","fetch","then","Error","catch","e","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bebda80.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst Field = ({x, y, board, currentPlayer, players, setPOT, checkWon, isWon, setIsDraw, newGame}) =>\n{\n    const [field, setField] = useState('');\n    const playerMark =\n    {\n        1: 'x',\n        2: 'o'\n    };\n\n    if(newGame && field !== ''){\n        setField('');\n        board[x][y] = '';\n    }\n\n    const handleMove = () =>\n    {\n        if(field === '' && !isWon)\n        {\n            setField(playerMark[currentPlayer]);\n            board[x][y] = currentPlayer;\n            if(!checkWon()) setPOT(players[!players[currentPlayer]]);\n        }\n\n        if(board.flat().every(field => field !== '')) setIsDraw(true);\n    }\n\n    return (\n        <div onClick={ handleMove } className=\"field\">\n            {field}\n        </div>\n    )\n}\n\nexport default Field\n","import React from 'react'\nimport Field from './Field'\nimport './Board.css'\n\nconst Board = ({board, currentPlayer, players, setPOT, checkWon, isWon, setIsDraw, newGame}) =>\n{\n    return (\n        <div className=\"board\">\n            {\n                board.map((row, i) =>\n                    <div key={i} className={i > 0 ? 'row hline': 'row'}>\n                        {\n                            row.map((rowField, j) =>\n                                <React.Fragment key={j}>\n                                    <Field\n                                        x = {i}\n                                        y = {j}\n                                        board = {board}\n                                        currentPlayer = {currentPlayer}\n                                        players = {players}\n                                        setPOT = {setPOT}\n                                        checkWon = {checkWon}\n                                        isWon = {isWon}\n                                        setIsDraw = {setIsDraw}\n                                        newGame = {newGame}\n                                    />\n                                    {\n                                        j < row.length - 1 ? \n                                            <div\n                                                className=\"vline\">\n                                            </div>\n                                        : null\n                                    }\n                                </React.Fragment>\n                            )\n                        }\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n\nexport default Board\n","import React, {useState} from 'react'\nimport Board from './Board'\nimport './Game.css'\n\nconst Game = () =>\n{\n    const players =\n    {\n        [false]: 1,\n        [true]: 2,\n        1: false,\n        2: true\n    }\n    \n    const boardTemplate =\n    [\n        Array(3).fill(''),\n        Array(3).fill(''),\n        Array(3).fill('')\n    ]\n\n    const [ playerOnTurn, setPlayerOnTurn ] = useState(1);\n    const [ isWon, setIsWon] = useState(false);\n    const [ isDraw, setIsDraw ] = useState(false);\n    const [ board ] = useState(boardTemplate);\n    const [ newGame, setNewGame ] = useState(false);\n\n    const checkWon = () =>\n    {\n        const checks = [];\n        \n        const diag1 = [];\n        const diag2 = [];\n        for(let i = 0; i < board.length; i++)\n        {\n            //checks horizontal\n            checks.push(board[i].every((field) => field === playerOnTurn));\n\n            //checks vertical\n            const temp = [];\n            for(let j = 0; j < board.length; j++)\n            {\n                temp.push(board[j][i]);\n            }\n            checks.push(temp.every((field) => field === playerOnTurn));\n\n            //checks diagional 1\n            diag1.push(board[i][i]);\n        }\n\n        //checks diagional 2\n        let i;\n        let j = 0;\n        for(i = board.length-1 ; i >= 0; i--)\n        {\n            diag2.push(board[i][j]);\n            j++;\n        }\n\n        if(i < 0)\n        {\n            checks.push(\n                diag1.every((field) => field === playerOnTurn),\n                diag2.every((field) => field === playerOnTurn)\n            );\n        }\n\n        if(checks.includes(true))\n        {\n            setIsWon(true);\n            return true;\n        }\n    }\n\n    const handleNewGame = () =>\n    {\n        setNewGame(true);\n        setIsWon(false);\n        setPlayerOnTurn(1);\n        const flatBoard = [];\n        fetch(board)\n        .then(() => flatBoard.push(...board.flat()))\n        .then(() => \n        {\n            if(flatBoard.every(field => field === '')) setNewGame(false);\n            else throw new Error('ResetBoardError');\n        }).catch((e) => console.log(e));\n        setIsDraw(false);\n    }\n\n    return (\n        <div className=\"game\">\n            <h1>Player\n                {isWon && ` ${playerOnTurn} won`}\n                {isDraw && '\\'s on draw'}\n                {!isWon && !isDraw && ` on turn: ${playerOnTurn}`}\n            </h1>\n            <Board\n                board = {board}\n                currentPlayer = {playerOnTurn}\n                players = {players}\n                setPOT = {setPlayerOnTurn}\n                checkWon = {checkWon}\n                isWon = {isWon}\n                setIsDraw = {setIsDraw}\n                newGame = {newGame}\n            />\n            {\n                isWon || isDraw ?\n                <button onClick={ handleNewGame }>new Game</button>\n                : null\n            }\n        </div>\n    )\n}\n\nexport default Game\n","import './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <>\n      <Game />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}